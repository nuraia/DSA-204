#include <iostream>
#include<vector>
#include<queue>
using namespace std;
vector<int>adj[100];
int visited[100]={0};
int parent[100];
int dis[100]={0};

void addEdge(int a,int b){
    adj[a].push_back(b);
    adj[b].push_back(a);
}

void bfs(int s){
    queue<int>q;
    visited[s]=1;
    parent[s]=s;
    dis[s]=0; 
    q.push(s);
    
    while(!q.empty()){
        int u=q.front();
        q.pop();
        
        for(int i=0;i<adj[u].size();++i){
            if(visited[adj[u][i]] == 0){
                int v = adj[u][i];
                visited[v]=1;
                parent[v]=u;
                dis[v]=dis[u]+1;
                q.push(v);
            }
        }
    }
}

int main()
{
    int n=8;
    
    addEdge(1,2);
    addEdge(2,4);
    addEdge(1,4);
    addEdge(1,3);
    addEdge(3,5);
    addEdge(3,7);
    addEdge(3,6);
    addEdge(4,7);
    
for(int i=0;i<n;++i){
    if(visited[i]==0){
        bfs(i);
    }
}

int a,b;
cout<<"two Nodes: ";
cin>>a>>b;

cout<<"\n Shortest Distance between two nodes : ";
cout<<dis[a]+dis[b]<<endl;

   return 0;
}
