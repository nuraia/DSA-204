#include <iostream>
#include <vector>
#include <queue>
 
using namespace std;

vector<int>adj[100];
int visited[100]={0};
int parent[100];
int dis[100]={0};

void graph(int a,int b){
    while(1){
    adj[a].push_back(a*2);
    int x=a;
    a=a*2;
    if(a>b){
        adj[x].push_back(x-1);
        a=x-1;
    }
    else if(a==b){
        break;
    }
}
}

void bfs(int s){
    queue<int>q;
    visited[s]=1;
    parent[s]=-1;
    dis[s]=0; 
    q.push(s);
    
    while(!q.empty()){
        int u=q.front();
        q.pop();
        
        for(int i=0;i<adj[u].size();++i){
            if(visited[adj[u][i]] == 0){
                int v = adj[u][i];
                visited[v]=1;
                parent[v]=u;
                dis[v]=dis[u]+1;
                q.push(v);
            }
        }
    }
}

void pathprint(int b){
    if(b ==-1){
        return ; 
    }
 
     pathprint(parent[b]) ;
    cout<<b;
    cout<<"->"; 
} 

int main()
{  int a,b;
   cin >> a >> b ;
   graph(a,b);
    
    if(visited[a]==0){
        bfs(a);
    }
 
cout<<"\n Shortest Distance between two nodes : ";
cout<<dis[a]+dis[b]<<endl;
 
pathprint(b);   
   return 0;
}
